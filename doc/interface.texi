@c \input texinfo    @c -*- texinfo -*-
@c @defcodeindex cm
@cindex Extending 

@node Extending Oleo, Reporting Bugs, Functions, Top
@chapter Extending the Oleo system



@menu
* New "at" functions::            Adding new "at" Functions
@end menu

@node New "at" functions,  , Extending Oleo, Extending Oleo
@section Adding new "at" Functions

It is easy to add new @@ functions.  Suppose that I want to add 
a greatest common divisor function.  Here is a definition:
@example
int gcd(i,k)
    int i,k;
@{     
  int c;
  if ( i < 0 )  i = -i;
  if ( k < 0 )  k = -k;
  while ( k != 0 ) @{
    c = k;
    k = i % k;
    i = c;
  @}
  return  i;
@}
@end example



In Oleo, I would like to enter @code{@@gcd(6,20)}, and have the result
@code{2} displayed.  The following files need to be changed or created:

@table @file
@item my-new-functions.c

We will create a new class of functions called @var{int_funs}.  For
simplicity, there is only one function, @code{gcd}, in this class, but
there could be many more. In addition to the code given above for @var{gcd}, 
we need an interface between Oleo and @var{gcd}.  
@example
static void
do_gcd (p)
     struct value *p;
@{
  int arg0 = p[0].Int;
  int arg1 = p[1].Int;

  p->Int = gcd (arg0,arg1);
  p->type = TYP_INT;
@}
@end example

Next, we need to give information about the members of this new class of
functions.  The "II" refers to the two integer arguments.  For more
examples, see @file{busi.c}.
@example
struct function int_funs[] =
@{
  @{C_FN2, X_A2, "II", do_gcd, "gcd"@},
  @{0, 0, "", 0, 0@},
@};
@end example

Finally, we need some standard headers and defines.  These are probably
not all necessary.

@example
#include "funcdef.h"
#include "sysdef.h"
#include "global.h"
#include "cell.h"
#include "eval.h"
#include "errors.h"

struct value
  @{
    int type;
    union vals x;
  @};

#define Float	x.c_d
#define String	x.c_s
#define Int	x.c_l
#define Value	x.c_i
#define Rng	x.c_r
@end example


@item forminfo.c

It's polite to add information about new functions.  This information
can be added in an appropriate place in @file{forminfo.c}:
@example
"gcd",
"find gcd                       gcd(a,b)",
""
"The greatest common divisor of A and B.",
0,
@end example

@item byte-compile.c

The byte compiler needs to be told about the new class of functions.  
We declare the new class of functions:
@example
extern struct function int_funs[];
@end example
and instruct the compiler to read them by adding the class to
the appropriate structure.  There are a few unfortunate hacks to clean up.
@example
int n_usr_funs = 5;
static struct function *__usr_funs[] =
@{
  date_funs,
  busi_funs,
  string_funs,
  cells_funs,
  int_funs,
@};
static int __usr_n_funs[] =	
@{				
  32, 18, 11, 10,1		
@};				

@end example

@item Makefile

The file @file{my-new-functions.o} needs to be added to the list of
object files.  One possibility is this:
@example
objs = my-new-functions.o \
 parse.tab.o byte-compile.o eval.o ref.o \
 ...
@end example
@end table

